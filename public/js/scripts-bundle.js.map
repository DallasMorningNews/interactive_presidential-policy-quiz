{"version":3,"sources":["+custom.js"],"names":["$","document","ready","generateQuestion","i","category","each","questionGroup","k","v","cat","c","find","text","points","questions","question","answers","_","shuffle","answer_group","key","value","append","bind","answerSelected","this","addClass","unbind","checkAnswers","console","log","correct_answer","capitalize","insertBefore","quiz","total","post","uniqueID","fail","done","data","updateNumbers","removeClass","clintonCount","trumpCount","clintonScore","trumpScore","candidate","d","Date","year","getFullYear","getJSON","q1","q2","q3","q4","attr","slideDown","id","click","parent","pointsIndex","index","closest"],"mappings":"AAAAA,EAAAC,UAAAC,MAAA,WAgGA,QAAAC,GAAAC,EAAAC,GAIAL,EAAAM,KAAAC,EAAA,SAAAC,EAAAC,GAEA,GAAAJ,IAAAI,EAAAC,IAAA,CAIA,GAAAC,GAAAH,CAGAR,GAAA,IAAAK,GAAAO,KAAA,MAAAC,KAAA,OAAAC,EAAAV,GAAA,KAAAK,EAAAM,UAAAX,GAAAY,SAIA,IAAAC,GAAAC,EAAAC,QAAAV,EAAAM,UAAAX,GAAAgB,aAGApB,GAAAM,KAAAW,EAAA,SAAAI,EAAAC,GACAtB,EAAA,IAAAK,GAAAO,KAAA,iBAAAW,OAAA,OAAAN,EAAAI,GAAA,WAKArB,EAAA,IAAAK,GAAAO,KAAA,oBAAAY,KAAA,QAAA,WAIA,GAAAC,GAAAzB,EAAA0B,MAAAb,MAGAb,GAAA0B,MAAAC,SAAA,YAIA3B,EAAA,IAAAK,GAAAO,KAAA,oBAAAgB,OAAA,SAIAC,EAAAlB,EAAAP,EAAAqB,QAYA,QAAAI,GAAAlB,EAAAP,EAAAqB,GACAK,QAAAC,IAAApB,EAAAP,EAAAqB,EAEA,IAAApB,GAAAE,EAAAI,GAAAD,GAGAe,KAAAlB,EAAAI,GAAAI,UAAAX,GAAA4B,gBAIAhC,EAAA,8CAAAkB,EAAAe,WAAAnB,EAAAV,IAAA,2BAAA8B,aAAAlC,EAAA,IAAAK,EAAA,gBAIA8B,EAAA,KAAAxB,EAAA,IAAAP,EAAA,EAGA+B,EAAAC,OAAAhC,EAAA,EAIAJ,EAAAqC,KAAA,uEAAAC,EAAAH,EAAA,WACAL,QAAAC,IAAA,cACAQ,KAAA,WACAT,QAAAC,IAAA,qCACAS,KAAA,SAAAC,GACAC,EAAAD,MAMAzC,EAAA,+EAAAO,EAAAI,GAAAI,UAAAX,GAAA4B,eAAA,QAAAE,aAAAlC,EAAA,IAAAK,EAAA,gBAKAL,EAAA,IAAAK,GAAAO,KAAA,cAAA+B,YAAA,WAKA,QAAAD,GAAAD,GAGAG,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAIA/C,EAAAM,KAAAmC,EAAA,SAAApB,EAAAC,GACA,oBAAAA,EAAA0B,WACAJ,IACAE,GAAAxB,EAAAc,OACA,iBAAAd,EAAA0B,YACAH,IACAE,GAAAzB,EAAAc,SAIAN,QAAAC,IAAAa,EAAAE,EAAAD,EAAAE,GA5MA,GAAAE,GAAA,GAAAC,MACAC,EAAAF,EAAAG,aAEApD,GAAA,cAAAa,KAAAsC,EAGA,IAAA5C,GAWA+B,EAVAxB,GAAA,YAAA,aAAA,gBAIA8B,EAAA,EACAC,EAAA,EAEAC,EAAA,EACAC,EAAA,CAMA/C,GAAAqD,QAAA,eAAA,SAAAZ,GACAlC,EAAAkC,GAGA,IAAAN,IACAa,UAAA,GACAM,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACArB,MAAA,EAOApC,GAAA,kBAAAwB,KAAA,QAAA,WAGAW,EAAAa,UAAAhD,EAAA0B,MAAAgC,KAAA,OAGA1D,EAAA,cAAA2D,UAAA,KAKA3D,EAAAqC,KAAA,+DAAAF,EAAA,WACAL,QAAAC,IAAA,cACAQ,KAAA,WACAT,QAAAC,IAAA,qCACAS,KAAA,SAAAC,GACAX,QAAAC,IAAAU,GACAH,EAAAG,EAAAmB,KAIA5D,EAAA,kBAAA4B,OAAA,WASA5B,EAAA,oBAAA6D,MAAA,WAGA7D,EAAA0B,MAAAoC,OAAA,MAAAnC,SAAA,UAIA,IAAAoC,GAAA/D,EAAA0B,MAAAsC,QAGA3D,EAAAL,EAAA0B,MAAAuC,QAAA,mBAAAP,KAAA,KAGAvD,GAAA4D,EAAA1D","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar d = new Date();\n\tvar year = d.getFullYear();\n\n\t$('.copyright').text(year);\n\n\n\tvar questionGroup;\n\tvar points = [\"one point\", \"two points\", \"three points\"];\n\n\tvar totalPoints = 0;\n\n\tvar clintonCount = 0;\n\tvar trumpCount = 0;\n\n\tvar clintonScore = 0;\n\tvar trumpScore = 0;\n\n\tvar uniqueID;\n\n\tvar candidateSelected = false;\n\n\t$.getJSON(\"js/data.json\", function(data) {\n\t\tquestionGroup = data;\n\t});\n\n\tvar quiz = {\n\t\t\"candidate\": \"\",\n\t\t\"q1\": 0,\n\t\t\"q2\": 0,\n\t\t\"q3\": 0,\n\t\t\"q4\": 0,\n\t\t\"total\": 0\n\t};\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// SELECTING A CANDIDATE ////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t$(\".candidate-mug\").bind(\"click\", function() {\n\n\t\t// setting the candidate value on the quiz object to the candidate selected\n\t\tquiz.candidate = $(this).attr(\"alt\");\n\n\t\t//reveal the questions section\n\t\t$(\"#questions\").slideDown(500);\n\n\t\t// post that a candidate has been selected to the database. We do this here,\n\t\t// even though no questions have been answered yet, because we want to get the\n\t\t// id of the record so we can update numbers as questions get answered\n\t\t$.post(\"http://apps.dallasnews.com/livewire/presidential-policy-quiz\", quiz, function() {\n\t\t\t\tconsole.log(\"Success!\");\n\t\t\t}).fail(function() {\n\t\t\t\tconsole.log(\"Whoops, something bad happened!\");\n\t\t\t}).done(function(data) {\n\t\t\t\tconsole.log(data);\n\t\t\t\tuniqueID = data.id;\n\t\t\t});\n\n\t\t// unbind the click element on the candidate mugs. Choose wisely, as there's no going back\n\t\t$(\".candidate-mug\").unbind(\"click\");\n\t});\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// SELECTING A POINT VALUE FOR A QUESTION ///////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t$(\".point-values li\").click(function() {\n\n\t\t// hiding the point value selection list\n\t\t$(this).parent(\"ul\").addClass(\"no-show\");\n\n\t\t// grabbing the index of the li selected. This index value will correspond\n\t\t// to which question gets displayed\n\t\tvar pointsIndex = $(this).index();\n\n\t\t// grabbing the category of the point value selected\n\t\tvar category = $(this).closest(\".question-block\").attr(\"id\");\n\n\t\t// generate a question based on the point value selected in a given category\n\t\tgenerateQuestion(pointsIndex, category);\n\t});\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// GENERATING THE QUESTION //////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction generateQuestion(i, category) {\n\n\t\t// iterate over each category in the question group and find the category\n\t\t// that matches the one handed off to this function\n\t\t$.each(questionGroup, function(k,v) {\n\n\t\t\tif (category === v.cat) {\n\n\t\t\t\t// setting a category index (\"c\") to the key for the matching cateogry\n\t\t\t\t// in the questionGroup json\n\t\t\t\tvar c = k;\n\n\t\t\t\t// display the amount of points the question is for and the question selected\n\t\t\t\t$(\"#\" + category).find(\"h4\").text(\"For \" + points[i] + \": \" + v.questions[i].question);\n\n\t\t\t\t// shuffle the answers for that question for randomness in repeated questions\n\t\t\t\t// basically, we don't want the correct answer to be in the same position each time\n\t\t\t\tvar answers = _.shuffle(v.questions[i].answer_group);\n\n\t\t\t\t// iterate over the array of answers and append them to the answer-block\n\t\t\t\t$.each(answers, function(key, value) {\n\t\t\t\t\t$(\"#\" + category).find(\".answer-block\").append(\"<li>\" + answers[key] + \"</li>\");\n\t\t\t\t});\n\n\t\t\t\t// then bind the click function to each of those answer lis\n\t\t\t\t// when the user clicks, it'll hand off that answer to the checkAnswers\n\t\t\t\t$(\"#\" + category).find(\".answer-block li\").bind(\"click\", function() {\n\n\t\t\t\t\t// grabbing the text of the answer. we'll check this text against\n\t\t\t\t\t// the text for the correct answer for that question below\n\t\t\t\t\tvar answerSelected = $(this).text();\n\n\t\t\t\t\t// mark that answer as the selected one\n\t\t\t\t\t$(this).addClass(\"selected\");\n\n\t\t\t\t\t// we'll unbind the click function from the question after it's clicked\n\t\t\t\t\t// you only get one guess, kids, so make it count\n\t\t\t\t\t$(\"#\" + category).find(\".answer-block li\").unbind(\"click\");\n\n\t\t\t\t\t// hand off the category index, question index and selected answer\n\t\t\t\t\t// to the checkAnswers function\n\t\t\t\t\tcheckAnswers(c, i, answerSelected);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t}\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// CHECKING THE ANSWER AND DISPLAYING FEEDBACK //////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction checkAnswers(c, i, answerSelected) {\n\t\tconsole.log(c, i, answerSelected);\n\n\t\tvar category = questionGroup[c].cat;\n\n\t\t// checking if the answer is correct\n\t\tif (answerSelected === questionGroup[c].questions[i].correct_answer) {\n\n\t\t\t// if it is correct, we're going to append a response that says how many\n\t\t\t// points were awarded to a given candidate\n\t\t\t$(\"<p><span class='right-wrong'>Right. </span>\" + _.capitalize(points[i]) + \" to your candidate.</p>\").insertBefore($(\"#\" + category + \" .read-more\"));\n\n\t\t\t// update the appropriate quiz question's point value in the quiz object\n\t\t\t// we use i + i because i is an index value of the li element and is 0 indexed\n\t\t\tquiz[\"q\" + (c+1)] = (i+1);\n\n\t\t\t// update the quiz's total value\n\t\t\tquiz.total += (i+1);\n\n\t\t\t// update the user's quiz record on the livewire database, then update\n\t\t\t// the overall numbers with the data sent back\n\t\t\t$.post(\"http://apps.dallasnews.com/livewire/presidential-policy-quiz/update/\" + uniqueID, quiz, function() {\n\t\t\t\t\tconsole.log(\"Success!\");\n\t\t\t\t}).fail(function() {\n\t\t\t\t\tconsole.log(\"Whoops, something bad happened!\");\n\t\t\t\t}).done(function(data) {\n\t\t\t\t\tupdateNumbers(data);\n\t\t\t\t});\n\n\t\t} else {\n\t\t\t// if the answer is wrong, append a reponse that alerts the user as such\n\t\t\t// and supplies the correct answer\n\t\t\t$(\"<p><span class='right-wrong'>Thatâ€™s incorrect. </span> The right answer is: \" + questionGroup[c].questions[i].correct_answer + \"</p>\").insertBefore($(\"#\" + category + \" .read-more\"));\n\n\t\t}\n\n\t\t// and then we're going to reveal the link to the stories about x category\n\t\t$(\"#\" + category).find(\".read-more\").removeClass(\"no-show\");\n\n\n\t}\n\n\tfunction updateNumbers(data) {\n\n\t\t\t// 0 out the totals\n\t\t\tclintonCount = 0;\n\t\t\ttrumpCount = 0;\n\t\t\tclintonScore= 0;\n\t\t\ttrumpScore = 0;\n\n\t\t\t// iterate over the data returned from the database and total up the\n\t\t\t// individual counts\n\t\t\t$.each(data, function(key, value) {\n\t\t\t\tif (value.candidate === \"Hillary Clinton\") {\n\t\t\t\t\tclintonCount++;\n\t\t\t\t\tclintonScore += value.total;\n\t\t\t\t} else if (value.candidate === \"Donald Trump\") {\n\t\t\t\t\ttrumpCount ++;\n\t\t\t\t\ttrumpScore += value.total;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconsole.log(clintonCount, clintonScore, trumpCount, trumpScore);\n\n\t}\n\n\n\n\n\n});\n"],"sourceRoot":"/source/"}