{"version":3,"sources":["+custom.js"],"names":["$","document","ready","generateQuestion","i","category","each","questionGroup","k","v","cat","c","find","text","points","questions","question","answers","_","shuffle","answer_group","key","value","append","fadeOut","fadeIn","bind","answerSelected","this","addClass","unbind","checkAnswers","console","log","correct_answer","hasClass","totalPoints","capitalize","explainer","insertBefore","quiz","total","post","uniqueID","fail","done","data","updateNumbers","removeClass","clintonCount","trumpCount","clintonScore","trumpScore","combinedScores","candidate","clintonPercentage","trumpPercentage","Number","toLocaleString","css","closeModal","setTimeout","d","Date","year","getFullYear","getJSON","q1","q2","q3","q4","attr","id","allData","slideDown","click","pointsIndex","index","closest","candidateTop","window","scroll","undefined","offset","top","scrollTop","height"],"mappings":"AAAAA,EAAAC,UAAAC,MAAA,WA2IA,QAAAC,GAAAC,EAAAC,GAIAL,EAAAM,KAAAC,EAAA,SAAAC,EAAAC,GAEA,GAAAJ,IAAAI,EAAAC,IAAA,CAIA,GAAAC,GAAAH,CAGAR,GAAA,IAAAK,GAAAO,KAAA,MAAAC,KAAA,OAAAC,EAAAV,GAAA,KAAAK,EAAAM,UAAAX,GAAAY,SAIA,IAAAC,GAAAC,EAAAC,QAAAV,EAAAM,UAAAX,GAAAgB,aAGApB,GAAAM,KAAAW,EAAA,SAAAI,EAAAC,GACAtB,EAAA,IAAAK,GAAAO,KAAA,iBAAAW,OAAA,OAAAN,EAAAI,GAAA,WAIArB,EAAA,IAAAK,GAAAO,KAAA,MAAAY,QAAA,KAIAxB,EAAA,IAAAK,GAAAO,KAAA,iBAAAY,QAAA,IAAA,WACAxB,EAAA,IAAAK,GAAAO,KAAA,MAAAa,OAAA,KACAzB,EAAA,IAAAK,GAAAO,KAAA,iBAAAa,OAAA,OAKAzB,EAAA,IAAAK,GAAAO,KAAA,oBAAAc,KAAA,QAAA,WAIA,GAAAC,GAAA3B,EAAA4B,MAAAf,MAGAb,GAAA4B,MAAAC,SAAA,YAIA7B,EAAA,IAAAK,GAAAO,KAAA,oBAAAkB,OAAA,SAIAC,EAAApB,EAAAP,EAAAuB,QAYA,QAAAI,GAAApB,EAAAP,EAAAuB,GAEAK,QAAAC,IAAAtB,EAAAP,EAAAuB,EAEA,IAAAtB,GAAAE,EAAAI,GAAAD,GAGAiB,KAAApB,EAAAI,GAAAI,UAAAX,GAAA8B,gBAEAlC,EAAA,eAAAmC,SAAA,iBAAA,EACAnC,EAAA,kBAAA6B,SAAA,sBAEA7B,EAAA,gBAAA6B,SAAA,sBAIAO,GAAAhC,EAAA,EAIAJ,EAAA,uFAAAkB,EAAAmB,WAAAvB,EAAAV,IAAA,uBAAAG,EAAAI,GAAAI,UAAAX,GAAAkC,UAAA,QAAAC,aAAAvC,EAAA,IAAAK,EAAA,gBAIAmC,EAAA,KAAA7B,EAAA,IAAAP,EAAA,EAGAoC,EAAAC,OAAArC,EAAA,EAIAJ,EAAA0C,KAAA,uEAAAC,EAAAH,EAAA,WACAR,QAAAC,IAAA,cACAW,KAAA,WACAZ,QAAAC,IAAA,qCACAY,KAAA,SAAAC,GACAC,EAAAD,MAMA9C,EAAA,yHAAAO,EAAAI,GAAAI,UAAAX,GAAA8B,eAAA,KAAA3B,EAAAI,GAAAI,UAAAX,GAAAkC,UAAA,QAAAC,aAAAvC,EAAA,IAAAK,EAAA,gBAQAL,EAAA,IAAAK,GAAAO,KAAA,cAAAoC,YAAA,WAQA,QAAAD,GAAAD,GAGAG,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,CAEA,IAAAC,GAAA,CAIArD,GAAAM,KAAAwC,EAAA,SAAAzB,EAAAC,GACA,oBAAAA,EAAAgC,WACAL,IACAE,GAAA7B,EAAAmB,OACA,iBAAAnB,EAAAgC,YACAJ,IACAE,GAAA9B,EAAAmB,SAKAY,EAAAF,EAAAC,EAEAG,kBAAAJ,EAAAE,EAAA,IACAG,gBAAAJ,EAAAC,EAAA,IAEAF,EAAAM,OAAAN,GAAAO,eAAA,MACAN,EAAAK,OAAAL,GAAAM,eAAA,MAEA1B,QAAAC,IAAAsB,kBAAAC,iBAEAxD,EAAA,kBAAAa,KAAAsC,GACAnD,EAAA,gBAAAa,KAAAuC,GAEApD,EAAA,4BAAA2D,IAAA,OAAAJ,kBAAA,KACAvD,EAAA,qDAAA2D,IAAA,OAAAH,gBAAA,KAEAxD,EAAA,+BAAA2D,IAAA,QAAAJ,kBAAA,KAAA1C,KAAAsC,GACAnD,EAAA,6BAAA2D,IAAA,QAAAH,gBAAA,KAAA3C,KAAAuC,GAEApD,EAAA,uBAAAa,KAAAuB,GA4CA,QAAAwB,KAEA5D,EAAA,oBAAAwB,QAAA,KAIAqC,WAAA,WACA7D,EAAA,QAAAgD,YAAA,aACAhD,EAAA,YAAAgD,YAAA,kBACA,KA5VA,GAAAc,GAAA,GAAAC,MACAC,EAAAF,EAAAG,aAEAjE,GAAA,cAAAa,KAAAmD,EAGA,IAAAzD,GAWAoC,EAVA7B,GAAA,YAAA,aAAA,gBAEAsB,EAAA,EAEAa,EAAA,EACAC,EAAA,EAEAC,EAAA,EACAC,EAAA,CAMApD,GAAAkE,QAAA,eAAA,SAAApB,GACAvC,EAAAuC,GAGA,IAAAN,IACAc,UAAA,GACAa,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACA7B,MAAA,EAQAzC,GAAA,kBAAA0B,KAAA,QAAA,WAEAkC,IAEA5D,EAAA,eAAA6B,SAAA,oBACA7B,EAAA,kBAAAa,KAAA,gBAGA2B,EAAAc,UAAAtD,EAAA4B,MAAA2C,KAAA,OAKAvE,EAAA0C,KAAA,+DAAAF,EAAA,WACAR,QAAAC,IAAA,cACAW,KAAA,WACAZ,QAAAC,IAAA,qCACAY,KAAA,SAAAC,GACAd,QAAAC,IAAAa,GACAH,EAAAG,EAAA0B,GACAxE,EAAAkE,QAAA,+DAAA,SAAAO,GACA1B,EAAA0B,OAKAzE,EAAA,kBAAA8B,OAAA,SAGA+B,WAAA,WACA7D,EAAA,4BAAAyB,OAAA,QACA,KAGAoC,WAAA,WACA7D,EAAA,cAAA2D,IAAA,UAAA,GACA3D,EAAA,cAAA0E,UAAA,MACA,KAIA1E,EAAA4B,MAAAO,SAAA,WACAnC,EAAA,eAAA6B,SAAA,cAEA7B,EAAA,eAAA6B,SAAA,gBAaA7B,EAAA,oBAAA2E,MAAA,WAQA,GALA3E,EAAA,0BAAAgD,YAAA,yCAKAhD,EAAA,eAAAmC,SAAA,uBAAA,EASA,MAPAnC,GAAA,QAAA6B,SAAA,aACA7B,EAAA,WAAA6B,SAAA,qBAEAgC,YAAA,WACA7D,EAAA,oBAAAyB,OAAA,MACA,IAOA,IAAAmD,GAAA5E,EAAA4B,MAAAiD,QAGAxE,EAAAL,EAAA4B,MAAAkD,QAAA,mBAAAP,KAAA,KAGApE,GAAAyE,EAAAvE,IAqLA,IAAA0E,EAEA/E,GAAAgF,QAAAC,OAAA,WAEAjD,QAAAC,IAAA8C,GACAG,SAAAH,IACAA,EAAA/E,EAAA,eAAAmF,SAAAC,IAGA,IAAAC,GAAArF,EAAAgF,QAAAK,WACArF,GAAA,cAAAsF,SACAtF,EAAA,cAAAmF,SAAAC,GAEAC,GAAAN,GAAA/E,EAAA,eAAAmC,SAAA,uBAAA,GACAnC,EAAA,qBAAA6B,SAAA,UACA7B,EAAA,cAAA2D,IAAA,cAAA,WAEA3D,EAAA,qBAAAgD,YAAA,UACAhD,EAAA,cAAA2D,IAAA,cAAA,WAYA3D,EAAA,UAAA2E,MAAA,WACAf","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar d = new Date();\n\tvar year = d.getFullYear();\n\n\t$('.copyright').text(year);\n\n\n\tvar questionGroup;\n\tvar points = [\"one point\", \"two points\", \"three points\"];\n\n\tvar totalPoints = 0;\n\n\tvar clintonCount = 0;\n\tvar trumpCount = 0;\n\n\tvar clintonScore = 0;\n\tvar trumpScore = 0;\n\n\tvar uniqueID;\n\n\tvar candidateSelected = false;\n\n\t$.getJSON(\"js/data.json\", function(data) {\n\t\tquestionGroup = data;\n\t});\n\n\tvar quiz = {\n\t\t\"candidate\": \"\",\n\t\t\"q1\": 0,\n\t\t\"q2\": 0,\n\t\t\"q3\": 0,\n\t\t\"q4\": 0,\n\t\t\"total\": 0\n\t};\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// SELECTING A CANDIDATE ////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t$(\".candidate-mug\").bind(\"click\", function() {\n\n\t\tcloseModal();\n\n\t\t$(\"#candidates\").addClass(\"candidate-picked\");\n\t\t$(\"#candidates h4\").text(\"Total points\");\n\n\t\t// setting the candidate value on the quiz object to the candidate selected\n\t\tquiz.candidate = $(this).attr(\"alt\");\n\n\t\t// post that a candidate has been selected to the database. We do this here,\n\t\t// even though no questions have been answered yet, because we want to get the\n\t\t// id of the record so we can update numbers as questions get answered\n\t\t$.post(\"http://apps.dallasnews.com/livewire/presidential-policy-quiz\", quiz, function() {\n\t\t\t\tconsole.log(\"Success!\");\n\t\t\t}).fail(function() {\n\t\t\t\tconsole.log(\"Whoops, something bad happened!\");\n\t\t\t}).done(function(data) {\n\t\t\t\tconsole.log(data);\n\t\t\t\tuniqueID = data.id;\n\t\t\t\t$.getJSON(\"http://apps.dallasnews.com/livewire/presidential-policy-quiz\", function(allData) {\n\t\t\t\t\tupdateNumbers(allData);\n\t\t\t\t});\n\t\t\t});\n\n\t\t// unbind the click element on the candidate mugs. Choose wisely, as there's no going back\n\t\t$(\".candidate-mug\").unbind(\"click\");\n\n\t\t// fade in the score after the mugs animate to a smaller size\n\t\tsetTimeout(function() {\n\t\t\t$(\".candidate-score-block p\").fadeIn(\"500\");\n\t\t}, 500);\n\n\t\t//reveal the first question\n\t\tsetTimeout(function() {\n\t\t\t$(\"#questions\").css(\"opacity\", 1);\n\t\t\t$(\"#read-outs\").slideDown(500);\n\t\t}, 500);\n\n\t\t// adding a class to the quiz-block element to denote which candidate was\n\t\t// selected. This will be use in color-themeing li elements and responses\n\t\tif ($(this).hasClass(\"dem-mug\")) {\n\t\t\t$(\"#quiz-block\").addClass(\"dem-choice\");\n\t\t} else {\n\t\t\t$(\"#quiz-block\").addClass(\"rep-choice\");\n\t\t}\n\n\t});\n\n\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// SELECTING A POINT VALUE FOR A QUESTION ///////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t$(\".point-values li\").click(function() {\n\n\n\t\t$(\".candidate-score-block\").removeClass(\"dem-correct-answer rep-correct-answer\");\n\n\t\t// check if a candidate has been picked. If it hasn't, display a modal/popup\n\t\t// instructing the reader to do so\n\n\t\tif ($(\"#candidates\").hasClass(\"candidate-picked\") === false) {\n\n\t\t\t$(\"body\").addClass(\"no-scroll\");\n\t\t\t$(\"article\").addClass(\"modal-display\");\n\n\t\t\tsetTimeout(function() {\n\t\t\t\t$(\"#candidate-modal\").fadeIn(500);\n\t\t\t}, 250);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// grabbing the index of the li selected. This index value will correspond\n\t\t// to which question gets displayed\n\t\tvar pointsIndex = $(this).index();\n\n\t\t// grabbing the category of the point value selected\n\t\tvar category = $(this).closest(\".question-block\").attr(\"id\");\n\n\t\t// generate a question based on the point value selected in a given category\n\t\tgenerateQuestion(pointsIndex, category);\n\t});\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// GENERATING THE QUESTION //////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction generateQuestion(i, category) {\n\n\t\t// iterate over each category in the question group and find the category\n\t\t// that matches the one handed off to this function\n\t\t$.each(questionGroup, function(k,v) {\n\n\t\t\tif (category === v.cat) {\n\n\t\t\t\t// setting a category index (\"c\") to the key for the matching cateogry\n\t\t\t\t// in the questionGroup json\n\t\t\t\tvar c = k;\n\n\t\t\t\t// display the amount of points the question is for and the question selected\n\t\t\t\t$(\"#\" + category).find(\"h4\").text(\"For \" + points[i] + \": \" + v.questions[i].question);\n\n\t\t\t\t// shuffle the answers for that question for randomness in repeated questions\n\t\t\t\t// basically, we don't want the correct answer to be in the same position each time\n\t\t\t\tvar answers = _.shuffle(v.questions[i].answer_group);\n\n\t\t\t\t// iterate over the array of answers and append them to the answer-block\n\t\t\t\t$.each(answers, function(key, value) {\n\t\t\t\t\t$(\"#\" + category).find(\".answer-block\").append(\"<li>\" + answers[key] + \"</li>\");\n\t\t\t\t});\n\n\t\t\t\t// fade out the h5 tag directing users to pick a point total\n\t\t\t\t$(\"#\" + category).find(\"h5\").fadeOut(500);\n\n\t\t\t\t// hiding the point value selection list, then, after that finishes\n\t\t\t\t// fading in the h4 with the question and the ul with the answers\n\t\t\t\t$(\"#\" + category).find(\".point-values\").fadeOut(500, function() {\n\t\t\t\t\t$(\"#\" + category).find(\"h4\").fadeIn(500);\n\t\t\t\t\t$(\"#\" + category).find(\".answer-block\").fadeIn(500);\n\t\t\t\t});\n\n\t\t\t\t// then bind the click function to each of those answer lis\n\t\t\t\t// when the user clicks, it'll hand off that answer to the checkAnswers\n\t\t\t\t$(\"#\" + category).find(\".answer-block li\").bind(\"click\", function() {\n\n\t\t\t\t\t// grabbing the text of the answer. we'll check this text against\n\t\t\t\t\t// the text for the correct answer for that question below\n\t\t\t\t\tvar answerSelected = $(this).text();\n\n\t\t\t\t\t// mark that answer as the selected one\n\t\t\t\t\t$(this).addClass(\"selected\");\n\n\t\t\t\t\t// we'll unbind the click function from the question after it's clicked\n\t\t\t\t\t// you only get one guess, kids, so make it count\n\t\t\t\t\t$(\"#\" + category).find(\".answer-block li\").unbind(\"click\");\n\n\t\t\t\t\t// hand off the category index, question index and selected answer\n\t\t\t\t\t// to the checkAnswers function\n\t\t\t\t\tcheckAnswers(c, i, answerSelected);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t}\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// CHECKING THE ANSWER AND DISPLAYING FEEDBACK //////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction checkAnswers(c, i, answerSelected) {\n\n\t\tconsole.log(c, i, answerSelected);\n\n\t\tvar category = questionGroup[c].cat;\n\n\t\t// checking if the answer is correct\n\t\tif (answerSelected === questionGroup[c].questions[i].correct_answer) {\n\n\t\t\tif ($(\"#quiz-block\").hasClass(\"dem-choice\") === true) {\n\t\t\t\t$(\"#clinton-block\").addClass(\"dem-correct-answer\");\n\t\t\t} else {\n\t\t\t\t$(\"#trump-block\").addClass(\"rep-correct-answer\");\n\t\t\t}\n\n\t\t\t// updated the total score\n\t\t\ttotalPoints += (i + 1);\n\n\t\t\t// if it is correct, we're going to append a response that says how many\n\t\t\t// points were awarded to a given candidate\n\t\t\t$(\"<p class='response'><span class='correct'><i class='fa fa-check'></i> Right.</span> \" + _.capitalize(points[i]) + \" to your candidate. \" + questionGroup[c].questions[i].explainer + \"</p>\").insertBefore($(\"#\" + category + \" .read-more\"));\n\n\t\t\t// update the appropriate quiz question's point value in the quiz object\n\t\t\t// we use i + i because i is an index value of the li element and is 0 indexed\n\t\t\tquiz[\"q\" + (c+1)] = (i+1);\n\n\t\t\t// update the quiz's total value\n\t\t\tquiz.total += (i+1);\n\n\t\t\t// update the user's quiz record on the livewire database, then update\n\t\t\t// the overall numbers with the data sent back\n\t\t\t$.post(\"http://apps.dallasnews.com/livewire/presidential-policy-quiz/update/\" + uniqueID, quiz, function() {\n\t\t\t\t\tconsole.log(\"Success!\");\n\t\t\t\t}).fail(function() {\n\t\t\t\t\tconsole.log(\"Whoops, something bad happened!\");\n\t\t\t\t}).done(function(data) {\n\t\t\t\t\tupdateNumbers(data);\n\t\t\t\t});\n\n\t\t} else {\n\t\t\t// if the answer is wrong, append a reponse that alerts the user as such\n\t\t\t// and supplies the correct answer\n\t\t\t$(\"<p class='response'><span class='incorrect'><i class='fa fa-times'></i> That’s incorrect. </span> The right answer is \" + questionGroup[c].questions[i].correct_answer + \". \" + questionGroup[c].questions[i].explainer + \"</p>\").insertBefore($(\"#\" + category + \" .read-more\"));\n\n\t\t}\n\n\t\t// // append the explainer to the response\n\t\t// $(\".response\").append(\" \" + questionGroup[c].questions[i].explainer);\n\n\t\t// and then we're going to reveal the link to the stories about x category\n\t\t$(\"#\" + category).find(\".read-more\").removeClass(\"no-show\");\n\t}\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// UPDATING POINT TOTALS ////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction updateNumbers(data) {\n\n\t\t\t// zero out the totals\n\t\t\tclintonCount = 0;\n\t\t\ttrumpCount = 0;\n\t\t\tclintonScore = 0;\n\t\t\ttrumpScore = 0;\n\n\t\t\tvar combinedScores= 0;\n\n\t\t\t// iterate over the data returned from the database and total up the\n\t\t\t// individual counts\n\t\t\t$.each(data, function(key, value) {\n\t\t\t\tif (value.candidate === \"Hillary Clinton\") {\n\t\t\t\t\tclintonCount++;\n\t\t\t\t\tclintonScore += value.total;\n\t\t\t\t} else if (value.candidate === \"Donald Trump\") {\n\t\t\t\t\ttrumpCount ++;\n\t\t\t\t\ttrumpScore += value.total;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// get the total number of points by both candidates in aggregate\n\t\t\tcombinedScores = clintonScore + trumpScore;\n\n\t\t\tclintonPercentage = clintonScore / combinedScores * 100;\n\t\t\ttrumpPercentage = trumpScore / combinedScores * 100;\n\n\t\t\tclintonScore = Number(clintonScore).toLocaleString(\"en\");\n\t\t\ttrumpScore = Number(trumpScore).toLocaleString(\"en\");\n\n\t\t\tconsole.log(clintonPercentage, trumpPercentage);\n\t\t\t// update the scores in the candidate-score-blocks\n\t\t\t$(\"#clinton-score\").text(clintonScore);\n\t\t\t$(\"#trump-score\").text(trumpScore);\n\n\t\t\t$(\"#clinton-read-out figure\").css(\"left\", clintonPercentage + \"%\");\n\t\t\t$(\"#trump-read-out figure, #trump-read-out .read-out\").css(\"left\", trumpPercentage + \"%\");\n\n\t\t\t$(\"#clinton-read-out .read-out\").css(\"width\", clintonPercentage + \"%\").text(clintonScore);\n\t\t\t$(\"#trump-read-out .read-out\").css(\"width\", trumpPercentage + \"%\").text(trumpScore);\n\n\t\t\t$(\"#points-contributed\").text(totalPoints);\n\t}\n\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// WINDOWS SCROLLING FUNCTIONS //////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tvar candidateTop;\n\n\t$(window).scroll(function() {\n\n\t\tconsole.log(candidateTop);\n\t\tif (candidateTop === undefined) {\n\t\t\tcandidateTop = $(\"#candidates\").offset().top;\n\t\t}\n\n\t\tvar scrollTop = $(window).scrollTop();\n\t\tvar questionHeight = $(\"#questions\").height();\n\t\tvar questionTop = $(\"#questions\").offset().top;\n\n\t\tif (scrollTop > candidateTop && $(\"#candidates\").hasClass(\"candidate-picked\") === true) {\n\t\t\t$(\".candidate-picked\").addClass(\"sticky\");\n\t\t\t$(\"#questions\").css(\"padding-top\", \"100px\");\n\t\t} else {\n\t\t\t$(\".candidate-picked\").removeClass(\"sticky\");\n\t\t\t$(\"#questions\").css(\"padding-top\", \"40px\");\n\t\t}\n\n\n\t});\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// CLOSING THE MODAL ////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t// clicking the close button in the modal runs the function that handles closing the modal\n\t$(\".close\").click(function() {\n\t\tcloseModal();\n\t});\n\n\tfunction closeModal() {\n\t\t// fading out the modal\n\t\t$(\"#candidate-modal\").fadeOut(500);\n\n\t\t// after the modal fades out, remove the no-scroll class from body and the modal-display\n\t\t// class from the content article\n\t\tsetTimeout(function() {\n\t\t\t$(\"body\").removeClass(\"no-scroll\");\n\t\t\t$(\"#content\").removeClass(\"modal-display\");\n\t\t}, 500);\n\t}\n\n\n});\n"],"sourceRoot":"/source/"}